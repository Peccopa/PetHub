import React, { useState, useEffect } from 'react';
import './app.css';

export const App = () => {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const fetchComments = async () => {
    try {
      const res = await fetch('/api/comments');
      const data = await res.json();
      setComments(data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
    }
  };

  // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä + –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    fetchComments(); // —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

    const interval = setInterval(() => {
      fetchComments();
    }, 5000); // 5000 –º—Å = 5 —Å–µ–∫—É–Ω–¥

    return () => clearInterval(interval); // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newComment.trim() || isSubmitting) return;

    setIsSubmitting(true);
    try {
      await fetch('/api/comments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: newComment }),
      });
      setNewComment('');
      fetchComments(); // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container">
      <div className="image-section">
        <img src="https://placecats.com/400/400" alt="–ö–æ—Ç—ë–Ω–æ–∫" />
        <p className="caption">–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—É—à–∏—Å—Ç–∏–∫ –∂–¥—ë—Ç –≤–∞—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ üò∫</p>
      </div>

      <div className="comments-section">
        <h2>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h2>

        <div className="comments-list">
          {comments.length > 0 ? (
            comments.map((c) => (
              <div key={c.id} className="comment">
                üó®Ô∏è {c.text}
              </div>
            ))
          ) : (
            <p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!</p>
          )}
        </div>

        <form onSubmit={handleSubmit} className="comment-form">
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit(e);
              }
            }}
            disabled={isSubmitting}
          ></textarea>
          <button type="submit" disabled={isSubmitting}>
            {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ó–∞–ø–æ—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default App;
