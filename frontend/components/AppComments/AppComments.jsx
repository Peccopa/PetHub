import React, { useState, useEffect } from 'react';
import './AppComments.css';
import telepood from './telepood.svg';

export const AppComments = () => {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [username, setUsername] = useState(
    localStorage.getItem('username') || ''
  ); // –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [color, setColor] = useState(
    localStorage.getItem('color') || '#333333'
  ); // —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const fetchComments = async () => {
    try {
      const res = await fetch('/api/comments');
      const data = await res.json();
      setComments(data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
    }
  };

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    fetchComments();
    const interval = setInterval(fetchComments, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newComment.trim() || !username.trim() || isSubmitting) return;

    setIsSubmitting(true);
    try {
      await fetch('/api/comments', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: newComment, username, color }),
      });
      setNewComment('');
      fetchComments();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container">
      <div className="image-section">
        <img src={telepood} alt="Telepood" />
      </div>

      <div className="comments-section">
        <h2>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h2>

        <div className="comments-list">
          {comments.length > 0 ? (
            comments.map((c) => (
              <div key={c.id} className="comment">
                <strong>{c.username || '–ê–Ω–æ–Ω–∏–º'}:</strong> üó®Ô∏è{' '}
                <span style={{ color: c.color || '#333333' }}>{c.text}</span>
              </div>
            ))
          ) : (
            <p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!</p>
          )}
        </div>

        <form onSubmit={handleSubmit} className="comment-form">
          <div className="inputs">
            <input
              type="text"
              value={username}
              onChange={(e) => {
                setUsername(e.target.value);
                localStorage.setItem('username', e.target.value);
              }}
              placeholder="–í–∞—à–µ –∏–º—è"
              textarea
              maxLength="20"
              // style={{ color: color }}
              disabled={isSubmitting}
              required
            />
            <input
              type="color"
              value={color}
              onChange={(e) => {
                setColor(e.target.value);
                localStorage.setItem('color', e.target.value);
              }}
              title="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
              disabled={isSubmitting}
            />
          </div>
          <textarea
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            textarea
            maxLength="1000"
            placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
            style={{ color: color }}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit(e);
              }
            }}
            disabled={isSubmitting}
            required
          ></textarea>
          <button type="submit" disabled={isSubmitting}>
            {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ó–∞–ø–æ—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default AppComments;
